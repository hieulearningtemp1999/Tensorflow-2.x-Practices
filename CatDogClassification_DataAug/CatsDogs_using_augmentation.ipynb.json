{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"CatsDogs_using_augmentation.ipynb","provenance":[],"collapsed_sections":[]},"coursera":{"course_slug":"convolutional-neural-networks-tensorflow","graded_item_id":"uAPOR","launcher_item_id":"e9lTb"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"soycDcuKMNbZ","executionInfo":{"status":"ok","timestamp":1634363689937,"user_tz":-420,"elapsed":18661,"user":{"displayName":"Hiếu Nguyễn Ngọc","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17960148059331367810"}},"outputId":"9015a472-dd1c-47a1-c1e8-d636215d9bf7"},"source":["from google.colab import drive\n","drive.mount(\"/content/gdrive\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y9u8BwlYMgtd","executionInfo":{"status":"ok","timestamp":1634363689939,"user_tz":-420,"elapsed":20,"user":{"displayName":"Hiếu Nguyễn Ngọc","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17960148059331367810"}},"outputId":"89893b5d-c612-4984-ca97-a17d3f2ba10d"},"source":["cd /content/gdrive/My Drive"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/gdrive/My Drive\n"]}]},{"cell_type":"code","metadata":{"id":"dn-6c02VmqiN"},"source":["import os\n","import zipfile\n","import random\n","import shutil\n","import tensorflow as tf\n","from tensorflow.keras.optimizers import RMSprop\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from shutil import copyfile\n","from os import getcwd"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CgkfdySaNzLV"},"source":["# **Build Model**"]},{"cell_type":"code","metadata":{"id":"-BQrav4anTmj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634363837276,"user_tz":-420,"elapsed":3821,"user":{"displayName":"Hiếu Nguyễn Ngọc","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17960148059331367810"}},"outputId":"0ef0fa37-6dd5-4830-8be0-321a0b1bd6b9"},"source":["# DEFINE A KERAS MODEL TO CLASSIFY CATS V DOGS\n","# USE AT LEAST 3 CONVOLUTION LAYERS\n","model = tf.keras.models.Sequential([\n","  tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)),\n","  tf.keras.layers.MaxPooling2D(2,2),\n","  tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","  tf.keras.layers.MaxPooling2D(2,2), \n","  tf.keras.layers.Conv2D(64, (3,3), activation='relu'), \n","  tf.keras.layers.MaxPooling2D(2,2),\n","  # Flatten the results to feed into a DNN\n","  tf.keras.layers.Flatten(), \n","  # 512 neuron hidden layer\n","  tf.keras.layers.Dense(512, activation='relu'), \n","  # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('cats') and 1 for the other ('dogs')\n","  tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['accuracy'])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/optimizer_v2.py:356: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"]}]},{"cell_type":"markdown","metadata":{"id":"WCeGKRlJUR6e"},"source":["# **Traning**"]},{"cell_type":"code","metadata":{"id":"mlNjoJ5D61N6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634363919792,"user_tz":-420,"elapsed":9294,"user":{"displayName":"Hiếu Nguyễn Ngọc","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17960148059331367810"}},"outputId":"317ed45f-ef48-417d-a222-324b0ddea3d4"},"source":["TRAINING_DIR = \"Datasets/cat_dogs/cats_and_dogs_filtered/train/\"\n","train_datagen = ImageDataGenerator(\n","      rescale=1./255,\n","      rotation_range=40,\n","      width_shift_range=0.2,\n","      height_shift_range=0.2,\n","      shear_range=0.2,\n","      zoom_range=0.2,\n","      horizontal_flip=True,\n","      fill_mode='nearest')\n","\n","train_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n","                                                    batch_size=20,\n","                                                    class_mode='binary',\n","                                                    target_size=(150, 150))\n","\n","VALIDATION_DIR = \"Datasets/cat_dogs/cats_and_dogs_filtered/validation/\"\n","validation_datagen = ImageDataGenerator(\n","      rescale=1./255,\n","      rotation_range=40,\n","      width_shift_range=0.2,\n","      height_shift_range=0.2,\n","      shear_range=0.2,\n","      zoom_range=0.2,\n","      horizontal_flip=True,\n","      fill_mode='nearest')\n","\n","validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,\n","                                                         batch_size=20,\n","                                                         class_mode  = 'binary',\n","                                                         target_size = (150, 150))\n","\n","\n","\n","# Expected Output:\n","# Found 22498 images belonging to 2 classes.\n","# Found 2500 images belonging to 2 classes."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2000 images belonging to 2 classes.\n","Found 1000 images belonging to 2 classes.\n"]}]},{"cell_type":"markdown","metadata":{"id":"rxpFtuvHN8N2"},"source":["# **Get Hists**"]},{"cell_type":"code","metadata":{"id":"KyS4n53w7DxC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634364858651,"user_tz":-420,"elapsed":928388,"user":{"displayName":"Hiếu Nguyễn Ngọc","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17960148059331367810"}},"outputId":"8dccc4bf-765c-427e-92ed-725adaf1a978"},"source":["history = model.fit_generator(train_generator,\n","                              epochs=2,\n","                              verbose=1,\n","                              validation_data=validation_generator)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/training.py:1972: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","100/100 [==============================] - 899s 9s/step - loss: 0.8646 - accuracy: 0.5360 - val_loss: 0.7048 - val_accuracy: 0.5030\n","Epoch 2/2\n","100/100 [==============================] - 23s 228ms/step - loss: 0.6756 - accuracy: 0.5900 - val_loss: 0.6459 - val_accuracy: 0.6300\n"]}]},{"cell_type":"markdown","metadata":{"id":"RZT_oPKgN92X"},"source":["# **Visualize training process**"]},{"cell_type":"code","metadata":{"id":"MWZrJN4-65RC","colab":{"base_uri":"https://localhost:8080/","height":563},"executionInfo":{"status":"ok","timestamp":1634364872187,"user_tz":-420,"elapsed":435,"user":{"displayName":"Hiếu Nguyễn Ngọc","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17960148059331367810"}},"outputId":"64c03cd3-c0b7-4a5e-9301-4bc200c7439c"},"source":["%matplotlib inline\n","\n","import matplotlib.image  as mpimg\n","import matplotlib.pyplot as plt\n","\n","acc=history.history['accuracy']\n","val_acc=history.history['val_accuracy']\n","loss=history.history['loss']\n","val_loss=history.history['val_loss']\n","\n","epochs=range(len(acc)) # Get number of epochs\n","plt.plot(epochs, acc, 'r', \"Training Accuracy\")\n","plt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\n","plt.title('Training and validation accuracy')\n","plt.figure()\n","plt.plot(epochs, loss, 'r', \"Training Loss\")\n","plt.plot(epochs, val_loss, 'b', \"Validation Loss\")\n","plt.title('Training and validation loss')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Training and validation loss')"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"dyStEvyLvNJH"},"source":[""],"execution_count":null,"outputs":[]}]}